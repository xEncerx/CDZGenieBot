from aiogram import types, Dispatcher
from config.bot_data import bot
import markups as nav
from utils.message_utils import text_editor
from markups import cb
from aiogram.dispatcher import FSMContext
from states.CDZParam import CDZParam
from middleware.throttling_middleware import rate_limit
import asyncio
from utils.generate_img import aio_create_img

async def main_commands(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    action = callback_data["action"]
    if action == "change_name":
        await text_editor(text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –¶–î–ó\n"
                               "<b>–§–æ—Ä–º–∞—Ç:</b> <code>–ò–º—è –§–∞–º–∏–ª–∏—è</code>", call=call, markup=nav.back_button("creation"))
        await CDZParam.get_client_name.set()
    if action == "CDZ_name":
        await text_editor(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¶–î–ó", call=call, markup=nav.back_button("creation"))
        await CDZParam.get_CDZ_name.set()
    if action == "windows":
        await text_editor(text=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –ø–æ–¥ —Å–∏—Å—Ç–µ–º—É <b>{action}</b>", call=call, markup=nav.create_img_keyboard({'windows': 1, 'android': 0, 'iphone': 0}))
        await state.update_data(system={'windows': 1, 'android': 0, 'iphone': 0})
    if action == "android":
        await text_editor(text=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –ø–æ–¥ —Å–∏—Å—Ç–µ–º—É <b>{action}</b>", call=call,
                          markup=nav.create_img_keyboard({'windows': 0, 'android': 1, 'iphone': 0}))
        await state.update_data(system={'windows': 0, 'android': 1, 'iphone': 0})
    if action == "iphone":
        await text_editor(text=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –ø–æ–¥ —Å–∏—Å—Ç–µ–º—É <b>{action}</b>", call=call,
                          markup=nav.create_img_keyboard({'windows': 0, 'android': 0, 'iphone': 1}))
        await state.update_data(system={'windows': 0, 'android': 0, 'iphone': 1})
    if action == "extra_param":
        await text_editor(text=f"<b>–î–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!</b>\n\n"
                               f"<i>‚Ä¢ –í—Ä–µ–º—è - –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ª—é–±–æ–µ</i>\n"
                               f"<i>‚Ä¢ –ö–æ–ª-–≤–æ –∑–∞–¥–∞–Ω–∏–π - –∫–æ–ª-–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö|–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</i>\n"
                               f"<i>‚Ä¢ Text Wrap - –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ 1 —Å—Ç—Ä–æ–∫–µ(–∏–∑–º–µ–Ω—è—Ç—å –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–ª–µ–∑–∞–µ—Ç –∑–∞ —Ä–∞–º–∫–∏ —ç–∫—Ä–∞–Ω–∞)</i>", call=call, markup=nav.extra_menu)
    if action == "change_time":
        await text_editor(text="–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è.\n<b>–§–æ—Ä–º–∞—Ç:</b> <code>–ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã</code>", call=call, markup=nav.back_button("creation"))
        await CDZParam.get_time.set()
    if action == "change_number":
        await call.answer("‚ö†Ô∏è –î–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ beta —Ç–µ—Å—Ç–µ ‚ö†Ô∏è", show_alert=True)
        await text_editor(text="–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö|–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n"
                               "<b>–§–æ—Ä–º–∞—Ç 1:</b> <i>1 —á–∏—Å–ª–æ - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ</i>\n"
                               "<b>–§–æ—Ä–º–∞—Ç 2 :</b> <i>2 —á–∏—Å–ª–∞(12 2) - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ</i>", call=call, markup=nav.back_button("creation"))
        await CDZParam.get_number.set()
    if action == "change_text_wrap":
        await call.answer("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚ö†Ô∏è", show_alert=False)
        await text_editor(text="<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ 1 —Å—Ç—Ä–æ–∫–µ.</b>\n"
                               "<b>–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b> <i>Android:</i> <code>47</code>, <i>Iphone:</i> <code>55</code>",
                          call=call, markup=nav.back_button("creation"))
        await CDZParam.get_text_wrap.set()
    await call.answer()

async def update_data(state: FSMContext):
    async with state.proxy() as data:
        system = data.get("system", {'windows': 1, 'android': 0, 'iphone': 0})
        cdz_name = data.get("cdz_name")
        time = data.get("time")
        answer = data.get("answer")
        client_name = data.get("client_name")
        text_wrap = data.get("text_wrap")
    await state.finish()
    await CDZParam.start.set()
    await state.update_data(client_name=client_name, system=system, cdz_name=cdz_name, time=time, answer=answer, text_wrap=text_wrap)


async def get_text_wrap(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["text_wrap"] = message.text
        system = data.get("system", {'windows': 1, 'android': 0, 'iphone': 0})
    if len(data["text_wrap"].split()) == 1 and data["text_wrap"].isdigit():
        await text_editor(text=f"üéâ –ö–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{data['text_wrap']}</b>", message=message,
                          markup=nav.create_img_keyboard(system), is_call=False)
        await state.update_data(text_wrap=data["text_wrap"])
    else:
        await text_editor(text="‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö</b>", message=message,
                          markup=nav.create_img_keyboard(system), is_call=False)
    await update_data(state=state)

async def get_answer(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["answer"] = message.text.split()
        system = data.get("system", {'windows': 1, 'android': 0, 'iphone': 0})
        answer = list(data["answer"])
    if len(answer) == 1: answer.append("0")
    if all(map(str.isdigit, answer)):
        await text_editor(text=f"üéâ –ö–æ–ª-–≤–æ –∑–∞–¥–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{' '.join(answer)}</b>",
                          message=message,
                          markup=nav.create_img_keyboard(system), is_call=False)
    else:
        answer = None
        await text_editor(text="‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö</b>", message=message, markup=nav.create_img_keyboard(system), is_call=False)
    async with state.proxy() as data:
        data["answer"] = answer
    await update_data(state=state)

async def get_client_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["client_name"] = message.text
        system = data.get("system", {'windows': 1, 'android': 0, 'iphone': 0})
    await text_editor(text=f"üéâ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{data['client_name']}</b>", message=message, markup=nav.create_img_keyboard(system), is_call=False)
    await state.update_data(client_name=data["client_name"])
    await update_data(state=state)

async def get_cdz_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["cdz_name"] = message.text
        system = data.get("system", {'windows': 1, 'android': 0, 'iphone': 0})
    await text_editor(text=f"üéâ –ù–∞–∑–≤–∞–Ω–∏–µ –¶–î–ó —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{data['cdz_name']}</b>", message=message, markup=nav.create_img_keyboard(system), is_call=False)
    await state.update_data(cdz_name=data["cdz_name"])
    await update_data(state=state)

async def get_time(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["time"] = message.text
        system = data.get("system", {'windows': 1, 'android': 0, 'iphone': 0})
    await text_editor(text=f"üéâ –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{data['time']}</b>", message=message, markup=nav.create_img_keyboard(system), is_call=False)
    await state.update_data(time=data["time"])
    await update_data(state=state)

@rate_limit(20, key="create_img")
async def create_img(call: types.CallbackQuery, state: FSMContext):
    await text_editor("üñ® –ò–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...", call=call)
    async with state.proxy() as data:
        client_name = data.get("client_name")
        system_dict = data.get("system")
        cdz_name = data.get("cdz_name")
        time = data.get("time")
        answer = data.get("answer")
        text_wrap = data.get("text_wrap")
        if client_name and system_dict and cdz_name:
            system = next(key for key, value in data.get("system").items() if value == 1)
            asyncio.create_task(aio_create_img(call.from_user.id, cdz_name=cdz_name, client_name=client_name, time=time, answer=answer, system=system, text_wrap=text_wrap))
        else:
            await bot.send_message(call.from_user.id, "‚ùóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–µ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ã–ª–∏ —É–∫–∞–∑–∞–Ω—ã ‚ùóÔ∏è", reply_markup=nav.main_menu)
    await state.finish()
    await call.answer()


def register_handlers_create_img(dp: Dispatcher):
    dp.register_callback_query_handler(main_commands, cb.filter(action=["extra_param", "CDZ_name", "change_name", "change_number",
                                                                        "iphone", "android", "windows", "change_time", "change_text_wrap"]), state=CDZParam.start)
    dp.register_message_handler(get_cdz_name, state=CDZParam.get_CDZ_name)
    dp.register_message_handler(get_client_name, state=CDZParam.get_client_name)
    dp.register_message_handler(get_time, state=CDZParam.get_time)
    dp.register_message_handler(get_answer, state=CDZParam.get_number)
    dp.register_message_handler(get_text_wrap, state=CDZParam.get_text_wrap)
    dp.register_callback_query_handler(create_img, cb.filter(action=["create_img"]), state="*")